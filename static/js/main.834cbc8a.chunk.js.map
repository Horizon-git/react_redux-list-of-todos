{"version":3,"sources":["types/Filter.ts","features/currentTodo.ts","features/filter.ts","features/todos.ts","app/store.ts","app/hooks.ts","components/TodoList/TodoList.tsx","components/TodoFilter/TodoFilter.tsx","api.ts","components/Loader/Loader.tsx","components/TodoModal/TodoModal.tsx","App.tsx","index.tsx"],"names":["Filter","actions","todo","type","payload","currentTodoReducer","state","action","initialState","query","filterType","ALL","filterReducer","todos","todosReducer","rootReducer","combineReducers","currentTodo","filter","store","createStore","composeWithDevTools","applyMiddleware","thunk","useAppDispatch","useDispatch","useAppSelector","useSelector","TodoList","dispatch","filteredItems","useMemo","filtered","COMPLETED","completed","ACTIVE","title","toLowerCase","includes","className","map","id","classNames","onClick","currentTodoActions","TodoFilter","value","onChange","event","filterActions","target","placeholder","style","pointerEvents","get","url","delay","fullURL","Promise","resolve","setTimeout","then","fetch","res","json","Loader","TodoModal","useState","isLoading","setIsLoading","user","setUser","useEffect","userId","catch","error","Error","finally","href","email","name","App","todosFromServer","todosActions","Root","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.834cbc8a.chunk.js","sourcesContent":["export enum Filter {\n  ALL = 'all',\n  ACTIVE = 'active',\n  COMPLETED = 'completed',\n}\n","import { Todo } from '../types/Todo';\n\ntype RemoveTodoAction = { type: 'currentTodo/REMOVE' };\n\ntype SetTodoAction = {\n  type: 'currentTodo/SET';\n  payload: Todo;\n};\n\nconst removeTodo = (): RemoveTodoAction => ({ type: 'currentTodo/REMOVE' });\n\nconst setTodo = (todo: Todo): SetTodoAction => ({\n  type: 'currentTodo/SET',\n  payload: todo,\n});\n\nexport const actions = { setTodo, removeTodo };\n\ntype State = Todo | null;\ntype Action = SetTodoAction | RemoveTodoAction;\n\nconst currentTodoReducer = (\n  state: State = null,\n  action: Action,\n): State => {\n  switch (action.type) {\n    case 'currentTodo/SET':\n      return action.payload;\n    case 'currentTodo/REMOVE':\n      return null;\n\n    default:\n      return state;\n  }\n};\n\nexport default currentTodoReducer;\n","import { Filter } from '../types/Filter';\n\ntype SetFilterTypeAction = {\n  type: 'filter/SET_FILTER_TYPE';\n  payload: string;\n};\n\ntype SetQueryAction = {\n  type: 'filter/SET_QUERY';\n  payload: string;\n};\n\ntype ClearQueryAction = { type: 'filter/CLEAR_QUERY' };\n\nconst setFilterType = (type: string): SetFilterTypeAction => ({\n  type: 'filter/SET_FILTER_TYPE',\n  payload: type,\n});\n\nconst setQuery = (type: string): SetQueryAction => ({\n  type: 'filter/SET_QUERY',\n  payload: type,\n});\n\nconst clearQuery = (): ClearQueryAction => ({ type: 'filter/CLEAR_QUERY' });\n\nexport const actions = { setFilterType, setQuery, clearQuery };\n\ntype State = {\n  query: string,\n  filterType: string\n};\n\nconst initialState: State = { query: '', filterType: Filter.ALL };\n\ntype Action = SetFilterTypeAction | SetQueryAction | ClearQueryAction;\n\nconst filterReducer = (\n  state: State = initialState,\n  action: Action,\n): State => {\n  switch (action.type) {\n    case 'filter/SET_FILTER_TYPE':\n      return { ...state, filterType: action.payload };\n    case 'filter/SET_QUERY':\n      return { ...state, query: action.payload };\n    case 'filter/CLEAR_QUERY':\n      return { ...state, query: '' };\n    default:\n      return state;\n  }\n};\n\nexport default filterReducer;\n","import { Todo } from '../types/Todo';\n\ntype SetTodosAction = {\n  type: 'todos/SET';\n  payload: Todo[];\n};\n\nconst setTodos = (todos: Todo[]): SetTodosAction => ({\n  type: 'todos/SET',\n  payload: todos,\n});\n\nexport const actions = { setTodos };\n\ntype State = Todo[];\n\nconst todosReducer = (\n  state: State = [],\n  action: SetTodosAction,\n): State => {\n  switch (action.type) {\n    case 'todos/SET':\n      return action.payload;\n\n    default:\n      return state;\n  }\n};\n\nexport default todosReducer;\n","import { createStore, applyMiddleware, combineReducers } from 'redux';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport thunk from 'redux-thunk';\n\nimport currentTodoReducer from '../features/currentTodo';\nimport filterReducer from '../features/filter';\nimport todosReducer from '../features/todos';\n\nconst rootReducer = combineReducers({\n  currentTodo: currentTodoReducer,\n  filter: filterReducer,\n  todos: todosReducer,\n});\n\n// The `store` is passed to the Provider in `/src/index.tsx`\nexport const store = createStore(\n  rootReducer,\n  composeWithDevTools(\n    applyMiddleware(thunk),\n  ),\n);\n\nexport type RootState = ReturnType<typeof store.getState>;\nexport type AppDispatch = typeof store.dispatch;\n","import { TypedUseSelectorHook, useDispatch, useSelector } from 'react-redux';\nimport { AppDispatch, RootState } from './store';\n\nexport const useAppDispatch: () => AppDispatch = useDispatch;\nexport const useAppSelector: TypedUseSelectorHook<RootState> = useSelector;\n","import classNames from 'classnames';\nimport React, { useMemo } from 'react';\nimport { useAppDispatch, useAppSelector } from '../../app/hooks';\nimport { actions as currentTodoActions } from '../../features/currentTodo';\nimport { Filter } from '../../types/Filter';\n\nexport const TodoList: React.FC = () => {\n  const currentTodo = useAppSelector((state) => state.currentTodo);\n  const todos = useAppSelector((state) => state.todos);\n  const { query, filterType } = useAppSelector((state) => state.filter);\n\n  const dispatch = useAppDispatch();\n\n  const filteredItems = useMemo(() => {\n    let filtered = todos.filter((todo) => {\n      switch (filterType) {\n        case Filter.COMPLETED:\n          return todo.completed;\n        case Filter.ACTIVE:\n          return !todo.completed;\n        default:\n          return true;\n      }\n    });\n\n    if (query) {\n      filtered = filtered.filter(\n        (todo) => todo.title.toLowerCase().includes(query.toLowerCase()),\n      );\n    }\n\n    return filtered;\n  }, [todos, filterType, query]);\n\n  return (\n    <table className=\"table is-narrow is-fullwidth\">\n      <thead>\n        <tr>\n          <th>#</th>\n          <th>\n            <span className=\"icon\">\n              <i className=\"fas fa-check\" />\n            </span>\n          </th>\n          <th>Title</th>\n          <th> </th>\n        </tr>\n      </thead>\n\n      <tbody>\n        {filteredItems.map((todo) => {\n          const { id, title, completed } = todo;\n\n          return (\n            <tr data-cy=\"todo\" className=\"\" key={id}>\n              <td className=\"is-vcentered\">{id}</td>\n              <td className=\"is-vcentered\">\n                {completed && (\n                  <span className=\"icon\" data-cy=\"iconCompleted\">\n                    <i className=\"fas fa-check\" />\n                  </span>\n                )}\n              </td>\n              <td className=\"is-vcentered is-expanded\">\n                <p\n                  className={classNames({\n                    'has-text-success': completed,\n                    'has-text-danger': !completed,\n                  })}\n                >\n                  {title}\n                </p>\n              </td>\n              <td className=\"has-text-right is-vcentered\">\n                <button\n                  data-cy=\"selectButton\"\n                  className=\"button\"\n                  type=\"button\"\n                  onClick={() => dispatch(currentTodoActions.setTodo(todo))}\n                >\n                  <span className=\"icon\">\n                    <i\n                      className={classNames('far', {\n                        'fa-eye':\n                        currentTodo === null || currentTodo.id !== id,\n                        'fa-eye-slash':\n                        currentTodo !== null && currentTodo.id === id,\n                      })}\n                    />\n                  </span>\n                </button>\n              </td>\n            </tr>\n          );\n        })}\n      </tbody>\n    </table>\n  );\n};\n","import { useAppDispatch, useAppSelector } from '../../app/hooks';\nimport { actions as filterActions } from '../../features/filter';\nimport { Filter } from '../../types/Filter';\n\nexport const TodoFilter: React.FC = () => {\n  const { query, filterType } = useAppSelector((state) => state.filter);\n\n  const dispatch = useAppDispatch();\n\n  return (\n    <form className=\"field has-addons\">\n      <p className=\"control\">\n        <span className=\"select\">\n          <select\n            data-cy=\"statusSelect\"\n            value={filterType}\n            onChange={(event) => dispatch(filterActions\n              .setFilterType(event.target.value))}\n          >\n            <option value={Filter.ALL}>All</option>\n            <option value={Filter.ACTIVE}>Active</option>\n            <option value={Filter.COMPLETED}>Completed</option>\n          </select>\n        </span>\n      </p>\n\n      <p className=\"control is-expanded has-icons-left has-icons-right\">\n        <input\n          data-cy=\"searchInput\"\n          type=\"text\"\n          className=\"input\"\n          placeholder=\"Search...\"\n          value={query}\n          onChange={(event) => dispatch(filterActions\n            .setQuery(event.target.value))}\n        />\n        <span className=\"icon is-left\">\n          <i className=\"fas fa-magnifying-glass\" />\n        </span>\n        {query && (\n          <span className=\"icon is-right\" style={{ pointerEvents: 'all' }}>\n            {/* eslint-disable-next-line jsx-a11y/control-has-associated-label */}\n            <button\n              data-cy=\"clearSearchButton\"\n              type=\"button\"\n              className=\"delete\"\n              onClick={() => dispatch(filterActions.clearQuery())}\n            />\n          </span>\n        )}\n      </p>\n    </form>\n  );\n};\n","import { Todo } from './types/Todo';\r\nimport { User } from './types/User';\r\n\r\n// eslint-disable-next-line max-len\r\nconst BASE_URL = 'https://mate-academy.github.io/react_dynamic-list-of-todos/api';\r\n\r\nfunction wait(delay: number): Promise<void> {\r\n  return new Promise(resolve => {\r\n    setTimeout(resolve, delay);\r\n  });\r\n}\r\n\r\nfunction get<T>(url: string): Promise<T> {\r\n  // eslint-disable-next-line prefer-template\r\n  const fullURL = BASE_URL + url + '.json';\r\n\r\n  return wait(300)\r\n    .then(() => fetch(fullURL))\r\n    .then(res => res.json());\r\n}\r\n\r\nexport const getTodos = () => get<Todo[]>('/todos');\r\n\r\nexport const getUser = (userId: number) => get<User>(`/users/${userId}`);\r\n","import React from 'react';\nimport './Loader.scss';\n\nexport const Loader: React.FC = () => (\n  <div className=\"Loader\" data-cy=\"loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","import React, { useEffect, useState } from 'react';\nimport { getUser } from '../../api';\nimport { useAppDispatch, useAppSelector } from '../../app/hooks';\nimport { actions as currentTodoActions } from '../../features/currentTodo';\nimport { User } from '../../types/User';\nimport { Loader } from '../Loader';\n\nexport const TodoModal: React.FC = () => {\n  const currentTodo = useAppSelector((state) => state.currentTodo);\n  const dispatch = useAppDispatch();\n  const [isLoading, setIsLoading] = useState<boolean>(true);\n  const [user, setUser] = useState<User | null>(null);\n\n  useEffect(() => {\n    if (currentTodo) {\n      getUser(currentTodo.userId)\n        .then(setUser)\n        .catch((error) => {\n          throw new Error(error);\n        })\n        .finally(() => setIsLoading(false));\n    }\n  }, []);\n\n  return (\n    <div className=\"modal is-active\" data-cy=\"modal\">\n      <div className=\"modal-background\" />\n\n      {isLoading ? (\n        <Loader />\n      ) : (\n        <div className=\"modal-card\">\n          <header className=\"modal-card-head\">\n            <div\n              className=\"modal-card-title has-text-weight-medium\"\n              data-cy=\"modal-header\"\n            >\n              {`Todo #${currentTodo?.id}`}\n            </div>\n\n            {/* eslint-disable-next-line jsx-a11y/control-has-associated-label */}\n            <button\n              type=\"button\"\n              className=\"delete\"\n              data-cy=\"modal-close\"\n              onClick={() => dispatch(currentTodoActions.removeTodo())}\n            />\n          </header>\n\n          <div className=\"modal-card-body\">\n            <p className=\"block\" data-cy=\"modal-title\">\n              {currentTodo?.title}\n            </p>\n\n            <p className=\"block\" data-cy=\"modal-user\">\n              {currentTodo?.completed ? (\n                <strong className=\"has-text-success\">Done</strong>\n              ) : (\n                <strong className=\"has-text-danger\">Planned</strong>\n              )}\n\n              {' by '}\n\n              <a href={`mailto:${user?.email}`}>{user?.name}</a>\n            </p>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n};\n","/* eslint-disable max-len */\nimport React, { useEffect, useState } from 'react';\nimport 'bulma/css/bulma.css';\nimport '@fortawesome/fontawesome-free/css/all.css';\n\nimport { TodoList } from './components/TodoList';\nimport { TodoFilter } from './components/TodoFilter';\nimport { getTodos } from './api';\nimport { TodoModal } from './components/TodoModal';\nimport { Loader } from './components/Loader';\nimport { useAppDispatch, useAppSelector } from './app/hooks';\nimport { actions as todosActions } from './features/todos';\n\nexport const App: React.FC = () => {\n  const currentTodo = useAppSelector((state) => state.currentTodo);\n  const dispatch = useAppDispatch();\n  const [isLoading, setIsLoading] = useState(true);\n\n  useEffect(() => {\n    getTodos()\n      .then((todosFromServer) => dispatch(todosActions.setTodos(todosFromServer)))\n      .catch((error) => {\n        throw new Error(error);\n      })\n      .finally(() => setIsLoading(false));\n  }, []);\n\n  return (\n    <>\n      <div className=\"section\">\n        <div className=\"container\">\n          <div className=\"box\">\n            <h1 className=\"title\">Todos:</h1>\n\n            <div className=\"block\">\n              <TodoFilter />\n            </div>\n\n            <div className=\"block\">\n              {isLoading ? <Loader /> : <TodoList />}\n            </div>\n          </div>\n        </div>\n      </div>\n\n      {currentTodo && <TodoModal />}\n    </>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { HashRouter as Router } from 'react-router-dom';\n\nimport { store } from './app/store';\nimport { App } from './App';\n\nconst Root = () => (\n  <Provider store={store}>\n    <Router>\n      <App />\n    </Router>\n  </Provider>\n);\n\nReactDOM.render(<Root />, document.getElementById('root'));\n"],"sourceRoot":""}